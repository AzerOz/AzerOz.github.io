{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/ckxt0.jpg","path":"images/ckxt0.jpg","modified":0,"renderable":0},{"_id":"source/images/12523455622.jpg","path":"images/12523455622.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1465128545129},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1465128545131},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1465128545129},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1465128545132},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1465128545129},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1465128545132},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1465128545129},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1465128545147},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1465128545149},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1465128545149},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1465128545149},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1465128545147},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1465128545149},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1465128545144},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1465128545145},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1465128545145},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1465128545157},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465128545147},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1465128545149},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465128545147},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1465128545148},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1465128545175},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1465128545176},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1465128545176},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1465128545177},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1465128545176},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1465128545175},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1465128545177},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1465128545177},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1465128545177},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1465128545177},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1465128545176},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1465128545177},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1465128545178},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1465128545177},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1465128545178},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1465128545178},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1465128545178},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1465128545178},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1465128545180},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465128545178},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465128545179},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465128545179},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465128545179},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465128545179},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465128545179},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1465128545179},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1465128545199},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1465128545218},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1465128545207},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1465128545207},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1465128545209},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1465128545208},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1465128545208},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1465128545207},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1465128545209},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1465128545210},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1465128545210},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1465128545209},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1465128545210},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1465128545210},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1465128545209},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1465128545211},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1465128545212},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1465128545211},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1465128545212},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1465128545211},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1465128545215},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1465128545221},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1465128545214},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465128545213},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465128545211},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1465128545214},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1465128545214},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465128545213},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1465128545215},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1465128545217},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1465128545219},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1465128545218},{"_id":"public/2016/06/05/hello-world/index.html","hash":"c4afca8ba53e00e06ffcb4239e1ac983c64c2075","modified":1465129934494},{"_id":"public/index.html","hash":"23b4ca061dbb2704e68d433e80bfb55a0d452f4b","modified":1465214905659},{"_id":"public/archives/index.html","hash":"f05e60cdd6b7afe0ecc75d56e7223b3b12f081df","modified":1465214905659},{"_id":"public/archives/2016/index.html","hash":"81c969cc0996ec6e81e610b1307d0e7a1f92f3c5","modified":1465214905659},{"_id":"public/archives/2016/06/index.html","hash":"0092ba33cb3477e8132092ea9aad6dbbd1b0c4db","modified":1465214905659},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465129112227},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465129112227},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465129112227},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465129112227},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465129112227},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465129112227},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1465129112227},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1465129934529},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1465129934529},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465129112227},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1465129934529},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1465129112665},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1465129935098},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465129112666},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1465129112666},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1465129112666},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465129112666},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1465129112667},{"_id":"public/css/style.css","hash":"10e9b93cf935a165020e48334a40b84b0f895401","modified":1465129935098},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1465129935098},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1465129112667},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1465129935094},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1465129112672},{"_id":"themes/yilia/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1459279410000},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1465107134348},{"_id":"themes/yilia/_config.yml","hash":"2830837f70244be0d47085325062479624467513","modified":1465215947903},{"_id":"themes/yilia/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1465107134452},{"_id":"source/_posts/HandlerThread-Handler-Thread.md","hash":"a169cccaebf359961e7644e237fc00c9622072bd","modified":1465133673185},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1465107134443},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1465107134441},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1465107134440},{"_id":"themes/yilia/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1465107134447},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465107134449},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1465107134451},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465107134449},{"_id":"themes/yilia/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1465107134352},{"_id":"themes/yilia/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1465107134355},{"_id":"themes/yilia/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1465107134353},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1465107134355},{"_id":"themes/yilia/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1465107134357},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1465107134359},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1465107134361},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1465107134362},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"3709af4e8f7e1196dbd1f9dea62fa440d4b47836","modified":1465107134378},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1465107134387},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1465107134380},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1465107134399},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"420b94c78832456686ebd9831a5bfcb05365645a","modified":1465107134397},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1465107134402},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"2bbf5aad03f54055d9d7852e70ff7e6952a41f26","modified":1465107134405},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1465107134408},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b03e8424b4798d4887801afdfae457fbf6027838","modified":1465107134413},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1465107134415},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1465107134417},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1465107134455},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1465107134497},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1465107134513},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1465107134550},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1465107134550},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1465107134551},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1465107134551},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1465107134551},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1465107134552},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1465107134552},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1465107134553},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1465107134454},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1465107134553},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1465107134553},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1465107134554},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1465107134554},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1465107134554},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1465107134555},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1465107134555},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1465107134555},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1465107134555},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1465107134555},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465107134513},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465107134514},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465107134514},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465107134515},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465107134515},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465107134515},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1465107134535},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1465107134541},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1465107134563},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1465107134549},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1465107134567},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1465107134589},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1465107134573},{"_id":"themes/yilia/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1465107134584},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1465107134421},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1465107134422},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1465107134426},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"c115c282eebfb6b18612d2d8733272c270b03066","modified":1465107134427},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"d50294bf9858e7942208c380e851a37ed37f1d6f","modified":1465107134431},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1465107134429},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1465107134437},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1465107134439},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1465107134457},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1465107134459},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1465107134460},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1465107134462},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1465107134465},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1465107134470},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1465107134464},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1465107134478},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1465107134482},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1465107134484},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1465107134486},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1465107134487},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1465107134489},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1465107134491},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1465107134493},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1465107134495},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1465107134501},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1465107134506},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1465107134509},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1465107134511},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465107134516},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1465107134518},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1465107134523},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1465107134526},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1465107134533},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1465107134528},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1465107134504},{"_id":"public/categories/Android/index.html","hash":"bd8c683d93627d8c822ebe6bed702445fdc9c51e","modified":1465214905659},{"_id":"public/2016/06/05/HandlerThread-Handler-Thread/index.html","hash":"21734d99d9b442e3921b7cacacad235fe07c48ea","modified":1465214905659},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1465129934529},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1465129934529},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1465129934529},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1465129934530},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1465129934530},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1465129934530},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1465129934530},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1465129934530},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1465129934530},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1465129934530},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1465129934530},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1465129934530},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1465129934530},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1465129934530},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1465129934530},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1465129934530},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1465129934530},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1465129934530},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1465129934530},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1465129935098},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1465129935098},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1465129935098},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1465129935098},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1465129935098},{"_id":"source/images/694838.png","hash":"146722ff8c28047c13f38752713aad15782d5b62","modified":1465027115627},{"_id":"public/images/694838.png","hash":"146722ff8c28047c13f38752713aad15782d5b62","modified":1465131907923},{"_id":"source/images/ckxt0.jpg","hash":"980ebd08b10b0f3b9bf2603dc38d45842cc50d15","modified":1465125414262},{"_id":"public/images/ckxt0.jpg","hash":"980ebd08b10b0f3b9bf2603dc38d45842cc50d15","modified":1465132860205},{"_id":"source/images/12523455622.png","hash":"2e7ec19fe56fd3fa14138e38a7a6eb2757da3619","modified":1465213942044},{"_id":"public/images/12523455622.png","hash":"2e7ec19fe56fd3fa14138e38a7a6eb2757da3619","modified":1465214107960},{"_id":"source/images/12523455622.jpg","hash":"e5c214e78166847fbc688ac2cc914b0270271206","modified":1465214690868},{"_id":"public/images/12523455622.jpg","hash":"e5c214e78166847fbc688ac2cc914b0270271206","modified":1465214905659}],"Category":[{"name":"Android","_id":"cip2kj8i000017kuc2qfj4eyu"}],"Data":[],"Page":[],"Post":[{"title":"HandlerThread, Handler, Thread, Runnable","date":"2016-06-05T06:53:52.000Z","_content":"\n![](/images/ckxt0.jpg)\n\nHandler会关联一个单独的线程和消息队列。\nHandler默认关联主线程，虽然要提供Runnable参数 ，但默认是直接调用Runnable中的run()方法。也就是默认下会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。\n如果要在其他线程执行，可以使用HandlerThread。\nHandlerThread继承于Thread，所以它本质就是个Thread。与普通Thread的差别就在于，主要的作用是建立了一个线程，并且创立了消息队列，有来自己的looper,可以让我们在自己的线程中分发和处理消息。\n\n<!--more-->\n\n# HandlerThread的使用\n\n```java\n//Handler handler = new Handler() {\n//...\n//}\nHandlerThread uIhandlerThread = new HandlerThread(\"update\");\nuIhandlerThread.start();\n//Handler UIhandler = new Handler(uIhandlerThread.getLooper());\nHandler uIhandler = new Handler(uIhandlerThread.getLooper(), new Callback() {\n\tpublic boolean handleMessage(Message msg) {\n\tBundle b = msg.getData();\n\tint age = b.getInt(\"age\");\n\tString name = b.getString(\"name\");\n\tSystem.out.println(\"age is \" + age + \", name is\" + name);\n\tSystem.out.println(\"Handler--->\" + Thread.currentThread().getId());\n\tSystem.out.println(\"handlerMessage\");\n\treturn true;\n\t}\n});\n```\n\n当要停止uIhandlerThread执行时用：\n```java\nif (uIhandlerThread != null) {\n\tpointThread.quit();\n}\n```\n\n# Handler的使用\n\n目前常使用的有两种用法，\n一种是自定义Handler，在handleMessage进行事件的处理， 这个Message可以是在其他线程中send的，或者在主线程中send。\n在线程中发送信息到主进程：\n## 1.定义handler\n\n```java\npublic class MyHandler extends Handler {\n\t@Override\n\tpublic boolean handleMessage(Message msg) {\n\t\tswitch (msg.what){\n\t\tcase 1 :\n\t\t....\n\t\t}\n\t}\n}\nMyHandler myHandler = new MyHandler();\n```\n\n或者\n\n```java\nHandler myHandler = new Handler(new Callback() {\n\t// 参数也可以为（this.getMainLooper()，new Callback(){}）不写则默认为主进程的Looper\n\t@Override\n\tpublic boolean handleMessage(Message msg) {\n\t\t// TODO Auto-generated method stub\n\t\treturn false;\n\t}\n});\n```\n\n## 2.新建一个线程\n\n```java\nThread sender = new Thread(){\n\t@Override\n\tpublic void run() {\n\t\t....\n\t\t//Message msg = new Message();\n\t\tMessage msg = myHandler.obtainMessage(); //可以从handler中拿出message，省去了重新实例化的内存开销\n\t\t//myHandler.sendMessage(msg);\n\t\tmsg.sendToTarget();\n\t\t//myHandler.sendEmptyMessage(intWhat);\n\t}\n}\nsender.start();\n```\n\n在主线程中发信息到handler\n直接在主进程，不在线程中mHandler.sendMessage(msg);\n另一种为post一个线程进去，执行线程。直到线程退出或者是handler被removeCallbacks。\n定义一个线程Tread名为sender（不重复了）。\n然后执行，myHandler.post(sender);\n这样线程就在handler中执行。如果要停止线程的话：\n```java\nif(myHandler!=null) {\n\tmyHandler.removeCallbacks(senderObj);\n}\n```\n\n也可用一个Runnable来代替Thread\n\n```java\nRunnable r = new Runnable() {\n\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t}\n};\nmyHandler.post(r);\n```\n\n以上两种，是否使用handler的post来启动，差别在与是否开启新线程来执行处理。\n**使用post方法时，直接调用Thread或Runnable的run方法，所有处理都在主线程中进行，并没有开启定义的Thread或Runnable新的线程！！**\n\n# 关于Thread和Runnable的区别\n\n参考网址：http://www.360doc.com/content/10/1219/22/573136_79607619.shtml\nThread和Runnable是实现java多线程的两种方式，Thread是类，Runnable为接口，建议使用Runnable来实现多线程。\n如果让一个线程实现Runnable接口，那么当调用这个线程的对象开启多个线程时，可以让这些线程调用同一个变量；\n若这个线程是由继承Thread类而来，则要通过内部类来实现上述的功能，利用的就是内部类可任意访问外部类变量这个特性。（精辟！！）\n\n## 实现Runnable接口\n\n```java\npublic class ThreadTest {\n\tpublic static void main(String[] args) {\n\t\tMyThread mt=new MyThread();\n\t\tnew Thread(mt).start(); //通过实现Runnable的类的对象来开辟第一个线程\n\t\tnew Thread(mt).start(); //通过实现Runnable的类的对象来开辟第二个线程\n\t\tnew Thread(mt).start(); //通过实现Runnable的类的对象来开辟第三个线程\n\t\t//由于这三个线程是通过同一个对象mt开辟的，所以run()里方法访问的是同一个index\n\t}\n}\n```\n```java\n//实现Runnable接口\nclass MyThread implements Runnable {\n\tint index=0;\n\tpublic void run() {\n\t\tfor(;index<=200;)\n\t\tSystem.out.println(Thread.currentThread().getName()+\":\"+index++);\n\t}\n}\n```\n\n## 继承Thread\n\n```java\npublic class ThreadTest {\n\tpublic static void main(String[] args) {\n\t\tMyThread mt=new MyThread();\n\t\tmt.getThread().start(); //通过返回内部类的对象来开辟第一个线程\n\t\tmt.getThread().start(); //通过返回内部类的对象来开辟第二个线程\n\t\tmt.getThread().start(); //通过返回内部类的对象来开辟第三个线程\n\t\t//由于这三个线程是通过同一个匿名对象来开辟的，所以run()里方法访问的是同一个index\n\t}\n}\n```\n```java\nclass MyThread {\n\tint index=0;\n\t//定义一个内部类，继承Thread\n\tprivate class InnerClass extends Thread {\n\t\tpublic void run() {\n\t\t\tfor(;index<=200;)\n\t\t\tSystem.out.println(getName()+\":\"+index++);\n\t\t}\n\t}\n\t//这个函数的作用是返回InnerClass的一个匿名对象\n\tThread getThread() {\n\t\treturn new InnerClass();\n\t}\n}\n// 这里有一个问题：如果内部类要访问一个外部变量或方法，那么这个变量或方法必须定义为final，但为什么这里的变量index不用定义为final就可以被内部类访问？\n```\n\n# Thread的使用\n\n```java\nThread sender = new Thread(){\n\t@Override\n\tpublic void run() {\n\t\t....\n\t}\n}\nsender.start();\n```\n\n线程的停止\n```java\nif (sender != null) {\n\t//sender.quit();\n\tsender.join(); // 执行完毕当前处理后停止线程\n}\n```","source":"_posts/HandlerThread-Handler-Thread.md","raw":"---\ntitle: 'HandlerThread, Handler, Thread, Runnable'\ndate: 2016-06-05 14:53:52\ncategories: Android\ntags:\n---\n\n![](/images/ckxt0.jpg)\n\nHandler会关联一个单独的线程和消息队列。\nHandler默认关联主线程，虽然要提供Runnable参数 ，但默认是直接调用Runnable中的run()方法。也就是默认下会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。\n如果要在其他线程执行，可以使用HandlerThread。\nHandlerThread继承于Thread，所以它本质就是个Thread。与普通Thread的差别就在于，主要的作用是建立了一个线程，并且创立了消息队列，有来自己的looper,可以让我们在自己的线程中分发和处理消息。\n\n<!--more-->\n\n# HandlerThread的使用\n\n```java\n//Handler handler = new Handler() {\n//...\n//}\nHandlerThread uIhandlerThread = new HandlerThread(\"update\");\nuIhandlerThread.start();\n//Handler UIhandler = new Handler(uIhandlerThread.getLooper());\nHandler uIhandler = new Handler(uIhandlerThread.getLooper(), new Callback() {\n\tpublic boolean handleMessage(Message msg) {\n\tBundle b = msg.getData();\n\tint age = b.getInt(\"age\");\n\tString name = b.getString(\"name\");\n\tSystem.out.println(\"age is \" + age + \", name is\" + name);\n\tSystem.out.println(\"Handler--->\" + Thread.currentThread().getId());\n\tSystem.out.println(\"handlerMessage\");\n\treturn true;\n\t}\n});\n```\n\n当要停止uIhandlerThread执行时用：\n```java\nif (uIhandlerThread != null) {\n\tpointThread.quit();\n}\n```\n\n# Handler的使用\n\n目前常使用的有两种用法，\n一种是自定义Handler，在handleMessage进行事件的处理， 这个Message可以是在其他线程中send的，或者在主线程中send。\n在线程中发送信息到主进程：\n## 1.定义handler\n\n```java\npublic class MyHandler extends Handler {\n\t@Override\n\tpublic boolean handleMessage(Message msg) {\n\t\tswitch (msg.what){\n\t\tcase 1 :\n\t\t....\n\t\t}\n\t}\n}\nMyHandler myHandler = new MyHandler();\n```\n\n或者\n\n```java\nHandler myHandler = new Handler(new Callback() {\n\t// 参数也可以为（this.getMainLooper()，new Callback(){}）不写则默认为主进程的Looper\n\t@Override\n\tpublic boolean handleMessage(Message msg) {\n\t\t// TODO Auto-generated method stub\n\t\treturn false;\n\t}\n});\n```\n\n## 2.新建一个线程\n\n```java\nThread sender = new Thread(){\n\t@Override\n\tpublic void run() {\n\t\t....\n\t\t//Message msg = new Message();\n\t\tMessage msg = myHandler.obtainMessage(); //可以从handler中拿出message，省去了重新实例化的内存开销\n\t\t//myHandler.sendMessage(msg);\n\t\tmsg.sendToTarget();\n\t\t//myHandler.sendEmptyMessage(intWhat);\n\t}\n}\nsender.start();\n```\n\n在主线程中发信息到handler\n直接在主进程，不在线程中mHandler.sendMessage(msg);\n另一种为post一个线程进去，执行线程。直到线程退出或者是handler被removeCallbacks。\n定义一个线程Tread名为sender（不重复了）。\n然后执行，myHandler.post(sender);\n这样线程就在handler中执行。如果要停止线程的话：\n```java\nif(myHandler!=null) {\n\tmyHandler.removeCallbacks(senderObj);\n}\n```\n\n也可用一个Runnable来代替Thread\n\n```java\nRunnable r = new Runnable() {\n\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t}\n};\nmyHandler.post(r);\n```\n\n以上两种，是否使用handler的post来启动，差别在与是否开启新线程来执行处理。\n**使用post方法时，直接调用Thread或Runnable的run方法，所有处理都在主线程中进行，并没有开启定义的Thread或Runnable新的线程！！**\n\n# 关于Thread和Runnable的区别\n\n参考网址：http://www.360doc.com/content/10/1219/22/573136_79607619.shtml\nThread和Runnable是实现java多线程的两种方式，Thread是类，Runnable为接口，建议使用Runnable来实现多线程。\n如果让一个线程实现Runnable接口，那么当调用这个线程的对象开启多个线程时，可以让这些线程调用同一个变量；\n若这个线程是由继承Thread类而来，则要通过内部类来实现上述的功能，利用的就是内部类可任意访问外部类变量这个特性。（精辟！！）\n\n## 实现Runnable接口\n\n```java\npublic class ThreadTest {\n\tpublic static void main(String[] args) {\n\t\tMyThread mt=new MyThread();\n\t\tnew Thread(mt).start(); //通过实现Runnable的类的对象来开辟第一个线程\n\t\tnew Thread(mt).start(); //通过实现Runnable的类的对象来开辟第二个线程\n\t\tnew Thread(mt).start(); //通过实现Runnable的类的对象来开辟第三个线程\n\t\t//由于这三个线程是通过同一个对象mt开辟的，所以run()里方法访问的是同一个index\n\t}\n}\n```\n```java\n//实现Runnable接口\nclass MyThread implements Runnable {\n\tint index=0;\n\tpublic void run() {\n\t\tfor(;index<=200;)\n\t\tSystem.out.println(Thread.currentThread().getName()+\":\"+index++);\n\t}\n}\n```\n\n## 继承Thread\n\n```java\npublic class ThreadTest {\n\tpublic static void main(String[] args) {\n\t\tMyThread mt=new MyThread();\n\t\tmt.getThread().start(); //通过返回内部类的对象来开辟第一个线程\n\t\tmt.getThread().start(); //通过返回内部类的对象来开辟第二个线程\n\t\tmt.getThread().start(); //通过返回内部类的对象来开辟第三个线程\n\t\t//由于这三个线程是通过同一个匿名对象来开辟的，所以run()里方法访问的是同一个index\n\t}\n}\n```\n```java\nclass MyThread {\n\tint index=0;\n\t//定义一个内部类，继承Thread\n\tprivate class InnerClass extends Thread {\n\t\tpublic void run() {\n\t\t\tfor(;index<=200;)\n\t\t\tSystem.out.println(getName()+\":\"+index++);\n\t\t}\n\t}\n\t//这个函数的作用是返回InnerClass的一个匿名对象\n\tThread getThread() {\n\t\treturn new InnerClass();\n\t}\n}\n// 这里有一个问题：如果内部类要访问一个外部变量或方法，那么这个变量或方法必须定义为final，但为什么这里的变量index不用定义为final就可以被内部类访问？\n```\n\n# Thread的使用\n\n```java\nThread sender = new Thread(){\n\t@Override\n\tpublic void run() {\n\t\t....\n\t}\n}\nsender.start();\n```\n\n线程的停止\n```java\nif (sender != null) {\n\t//sender.quit();\n\tsender.join(); // 执行完毕当前处理后停止线程\n}\n```","slug":"HandlerThread-Handler-Thread","published":1,"updated":"2016-06-05T13:34:33.185Z","_id":"cip2kj8hu00007kucp7mr3am5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/ckxt0.jpg\" alt=\"\"></p>\n<p>Handler会关联一个单独的线程和消息队列。<br>Handler默认关联主线程，虽然要提供Runnable参数 ，但默认是直接调用Runnable中的run()方法。也就是默认下会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。<br>如果要在其他线程执行，可以使用HandlerThread。<br>HandlerThread继承于Thread，所以它本质就是个Thread。与普通Thread的差别就在于，主要的作用是建立了一个线程，并且创立了消息队列，有来自己的looper,可以让我们在自己的线程中分发和处理消息。</p>\n<a id=\"more\"></a>\n<h1 id=\"HandlerThread的使用\"><a href=\"#HandlerThread的使用\" class=\"headerlink\" title=\"HandlerThread的使用\"></a>HandlerThread的使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Handler handler = new Handler() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\">HandlerThread uIhandlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">uIhandlerThread.start();</span><br><span class=\"line\"><span class=\"comment\">//Handler UIhandler = new Handler(uIhandlerThread.getLooper());</span></span><br><span class=\"line\">Handler uIhandler = <span class=\"keyword\">new</span> Handler(uIhandlerThread.getLooper(), <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">\tBundle b = msg.getData();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age = b.getInt(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\">\tString name = b.getString(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"age is \"</span> + age + <span class=\"string\">\", name is\"</span> + name);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"Handler---&gt;\"</span> + Thread.currentThread().getId());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"handlerMessage\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当要停止uIhandlerThread执行时用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (uIhandlerThread != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tpointThread.quit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Handler的使用\"><a href=\"#Handler的使用\" class=\"headerlink\" title=\"Handler的使用\"></a>Handler的使用</h1><p>目前常使用的有两种用法，<br>一种是自定义Handler，在handleMessage进行事件的处理， 这个Message可以是在其他线程中send的，或者在主线程中send。<br>在线程中发送信息到主进程：</p>\n<h2 id=\"1-定义handler\"><a href=\"#1-定义handler\" class=\"headerlink\" title=\"1.定义handler\"></a>1.定义handler</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (msg.what)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyHandler myHandler = <span class=\"keyword\">new</span> MyHandler();</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Handler myHandler = <span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 参数也可以为（this.getMainLooper()，new Callback()&#123;&#125;）不写则默认为主进程的Looper</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-新建一个线程\"><a href=\"#2-新建一个线程\" class=\"headerlink\" title=\"2.新建一个线程\"></a>2.新建一个线程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread sender = <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"comment\">//Message msg = new Message();</span></span><br><span class=\"line\">\t\tMessage msg = myHandler.obtainMessage(); <span class=\"comment\">//可以从handler中拿出message，省去了重新实例化的内存开销</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//myHandler.sendMessage(msg);</span></span><br><span class=\"line\">\t\tmsg.sendToTarget();</span><br><span class=\"line\">\t\t<span class=\"comment\">//myHandler.sendEmptyMessage(intWhat);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sender.start();</span><br></pre></td></tr></table></figure>\n<p>在主线程中发信息到handler<br>直接在主进程，不在线程中mHandler.sendMessage(msg);<br>另一种为post一个线程进去，执行线程。直到线程退出或者是handler被removeCallbacks。<br>定义一个线程Tread名为sender（不重复了）。<br>然后执行，myHandler.post(sender);<br>这样线程就在handler中执行。如果要停止线程的话：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(myHandler!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tmyHandler.removeCallbacks(senderObj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>也可用一个Runnable来代替Thread</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myHandler.post(r);</span><br></pre></td></tr></table></figure>\n<p>以上两种，是否使用handler的post来启动，差别在与是否开启新线程来执行处理。<br><strong>使用post方法时，直接调用Thread或Runnable的run方法，所有处理都在主线程中进行，并没有开启定义的Thread或Runnable新的线程！！</strong></p>\n<h1 id=\"关于Thread和Runnable的区别\"><a href=\"#关于Thread和Runnable的区别\" class=\"headerlink\" title=\"关于Thread和Runnable的区别\"></a>关于Thread和Runnable的区别</h1><p>参考网址：<a href=\"http://www.360doc.com/content/10/1219/22/573136_79607619.shtml\" target=\"_blank\" rel=\"external\">http://www.360doc.com/content/10/1219/22/573136_79607619.shtml</a><br>Thread和Runnable是实现java多线程的两种方式，Thread是类，Runnable为接口，建议使用Runnable来实现多线程。<br>如果让一个线程实现Runnable接口，那么当调用这个线程的对象开启多个线程时，可以让这些线程调用同一个变量；<br>若这个线程是由继承Thread类而来，则要通过内部类来实现上述的功能，利用的就是内部类可任意访问外部类变量这个特性。（精辟！！）</p>\n<h2 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMyThread mt=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mt).start(); <span class=\"comment\">//通过实现Runnable的类的对象来开辟第一个线程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mt).start(); <span class=\"comment\">//通过实现Runnable的类的对象来开辟第二个线程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mt).start(); <span class=\"comment\">//通过实现Runnable的类的对象来开辟第三个线程</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//由于这三个线程是通过同一个对象mt开辟的，所以run()里方法访问的是同一个index</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Runnable接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;index&lt;=<span class=\"number\">200</span>;)</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\":\"</span>+index++);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承Thread\"><a href=\"#继承Thread\" class=\"headerlink\" title=\"继承Thread\"></a>继承Thread</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMyThread mt=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">\t\tmt.getThread().start(); <span class=\"comment\">//通过返回内部类的对象来开辟第一个线程</span></span><br><span class=\"line\">\t\tmt.getThread().start(); <span class=\"comment\">//通过返回内部类的对象来开辟第二个线程</span></span><br><span class=\"line\">\t\tmt.getThread().start(); <span class=\"comment\">//通过返回内部类的对象来开辟第三个线程</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//由于这三个线程是通过同一个匿名对象来开辟的，所以run()里方法访问的是同一个index</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个内部类，继承Thread</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(;index&lt;=<span class=\"number\">200</span>;)</span><br><span class=\"line\">\t\t\tSystem.out.println(getName()+<span class=\"string\">\":\"</span>+index++);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//这个函数的作用是返回InnerClass的一个匿名对象</span></span><br><span class=\"line\">\t<span class=\"function\">Thread <span class=\"title\">getThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InnerClass();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里有一个问题：如果内部类要访问一个外部变量或方法，那么这个变量或方法必须定义为final，但为什么这里的变量index不用定义为final就可以被内部类访问？</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Thread的使用\"><a href=\"#Thread的使用\" class=\"headerlink\" title=\"Thread的使用\"></a>Thread的使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread sender = <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sender.start();</span><br></pre></td></tr></table></figure>\n<p>线程的停止<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (sender != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//sender.quit();</span></span><br><span class=\"line\">\tsender.join(); <span class=\"comment\">// 执行完毕当前处理后停止线程</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p><img src=\"/images/ckxt0.jpg\" alt=\"\"></p>\n<p>Handler会关联一个单独的线程和消息队列。<br>Handler默认关联主线程，虽然要提供Runnable参数 ，但默认是直接调用Runnable中的run()方法。也就是默认下会在主线程执行，如果在这里面的操作会有阻塞，界面也会卡住。<br>如果要在其他线程执行，可以使用HandlerThread。<br>HandlerThread继承于Thread，所以它本质就是个Thread。与普通Thread的差别就在于，主要的作用是建立了一个线程，并且创立了消息队列，有来自己的looper,可以让我们在自己的线程中分发和处理消息。</p>","more":"<h1 id=\"HandlerThread的使用\"><a href=\"#HandlerThread的使用\" class=\"headerlink\" title=\"HandlerThread的使用\"></a>HandlerThread的使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Handler handler = new Handler() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\">HandlerThread uIhandlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">uIhandlerThread.start();</span><br><span class=\"line\"><span class=\"comment\">//Handler UIhandler = new Handler(uIhandlerThread.getLooper());</span></span><br><span class=\"line\">Handler uIhandler = <span class=\"keyword\">new</span> Handler(uIhandlerThread.getLooper(), <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">\tBundle b = msg.getData();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age = b.getInt(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\">\tString name = b.getString(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"age is \"</span> + age + <span class=\"string\">\", name is\"</span> + name);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"Handler---&gt;\"</span> + Thread.currentThread().getId());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"handlerMessage\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当要停止uIhandlerThread执行时用：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (uIhandlerThread != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tpointThread.quit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Handler的使用\"><a href=\"#Handler的使用\" class=\"headerlink\" title=\"Handler的使用\"></a>Handler的使用</h1><p>目前常使用的有两种用法，<br>一种是自定义Handler，在handleMessage进行事件的处理， 这个Message可以是在其他线程中send的，或者在主线程中send。<br>在线程中发送信息到主进程：</p>\n<h2 id=\"1-定义handler\"><a href=\"#1-定义handler\" class=\"headerlink\" title=\"1.定义handler\"></a>1.定义handler</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (msg.what)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyHandler myHandler = <span class=\"keyword\">new</span> MyHandler();</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Handler myHandler = <span class=\"keyword\">new</span> Handler(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 参数也可以为（this.getMainLooper()，new Callback()&#123;&#125;）不写则默认为主进程的Looper</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-新建一个线程\"><a href=\"#2-新建一个线程\" class=\"headerlink\" title=\"2.新建一个线程\"></a>2.新建一个线程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread sender = <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"comment\">//Message msg = new Message();</span></span><br><span class=\"line\">\t\tMessage msg = myHandler.obtainMessage(); <span class=\"comment\">//可以从handler中拿出message，省去了重新实例化的内存开销</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//myHandler.sendMessage(msg);</span></span><br><span class=\"line\">\t\tmsg.sendToTarget();</span><br><span class=\"line\">\t\t<span class=\"comment\">//myHandler.sendEmptyMessage(intWhat);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sender.start();</span><br></pre></td></tr></table></figure>\n<p>在主线程中发信息到handler<br>直接在主进程，不在线程中mHandler.sendMessage(msg);<br>另一种为post一个线程进去，执行线程。直到线程退出或者是handler被removeCallbacks。<br>定义一个线程Tread名为sender（不重复了）。<br>然后执行，myHandler.post(sender);<br>这样线程就在handler中执行。如果要停止线程的话：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(myHandler!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tmyHandler.removeCallbacks(senderObj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>也可用一个Runnable来代替Thread</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myHandler.post(r);</span><br></pre></td></tr></table></figure>\n<p>以上两种，是否使用handler的post来启动，差别在与是否开启新线程来执行处理。<br><strong>使用post方法时，直接调用Thread或Runnable的run方法，所有处理都在主线程中进行，并没有开启定义的Thread或Runnable新的线程！！</strong></p>\n<h1 id=\"关于Thread和Runnable的区别\"><a href=\"#关于Thread和Runnable的区别\" class=\"headerlink\" title=\"关于Thread和Runnable的区别\"></a>关于Thread和Runnable的区别</h1><p>参考网址：<a href=\"http://www.360doc.com/content/10/1219/22/573136_79607619.shtml\">http://www.360doc.com/content/10/1219/22/573136_79607619.shtml</a><br>Thread和Runnable是实现java多线程的两种方式，Thread是类，Runnable为接口，建议使用Runnable来实现多线程。<br>如果让一个线程实现Runnable接口，那么当调用这个线程的对象开启多个线程时，可以让这些线程调用同一个变量；<br>若这个线程是由继承Thread类而来，则要通过内部类来实现上述的功能，利用的就是内部类可任意访问外部类变量这个特性。（精辟！！）</p>\n<h2 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMyThread mt=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mt).start(); <span class=\"comment\">//通过实现Runnable的类的对象来开辟第一个线程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mt).start(); <span class=\"comment\">//通过实现Runnable的类的对象来开辟第二个线程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mt).start(); <span class=\"comment\">//通过实现Runnable的类的对象来开辟第三个线程</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//由于这三个线程是通过同一个对象mt开辟的，所以run()里方法访问的是同一个index</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Runnable接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;index&lt;=<span class=\"number\">200</span>;)</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">\":\"</span>+index++);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承Thread\"><a href=\"#继承Thread\" class=\"headerlink\" title=\"继承Thread\"></a>继承Thread</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMyThread mt=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">\t\tmt.getThread().start(); <span class=\"comment\">//通过返回内部类的对象来开辟第一个线程</span></span><br><span class=\"line\">\t\tmt.getThread().start(); <span class=\"comment\">//通过返回内部类的对象来开辟第二个线程</span></span><br><span class=\"line\">\t\tmt.getThread().start(); <span class=\"comment\">//通过返回内部类的对象来开辟第三个线程</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//由于这三个线程是通过同一个匿名对象来开辟的，所以run()里方法访问的是同一个index</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个内部类，继承Thread</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(;index&lt;=<span class=\"number\">200</span>;)</span><br><span class=\"line\">\t\t\tSystem.out.println(getName()+<span class=\"string\">\":\"</span>+index++);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//这个函数的作用是返回InnerClass的一个匿名对象</span></span><br><span class=\"line\">\t<span class=\"function\">Thread <span class=\"title\">getThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InnerClass();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里有一个问题：如果内部类要访问一个外部变量或方法，那么这个变量或方法必须定义为final，但为什么这里的变量index不用定义为final就可以被内部类访问？</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Thread的使用\"><a href=\"#Thread的使用\" class=\"headerlink\" title=\"Thread的使用\"></a>Thread的使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread sender = <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sender.start();</span><br></pre></td></tr></table></figure>\n<p>线程的停止<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (sender != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//sender.quit();</span></span><br><span class=\"line\">\tsender.join(); <span class=\"comment\">// 执行完毕当前处理后停止线程</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cip2kj8hu00007kucp7mr3am5","category_id":"cip2kj8i000017kuc2qfj4eyu","_id":"cip2kj8i700027kucumgsn026"}],"PostTag":[],"Tag":[]}}